//EJERCICIO 8

vertex_program BombaTeseladaVS glsl //nombre para el shader
{
  source BombaTeseladaVS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named_auto modelViewProjMat worldviewproj_matrix
  }
}

fragment_program BombaTeseladaFS glsl //nombre para el shader
{
  source BombaTeseladaFS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named texturaT int 0 // 1º unidad de textura ‐> *
    param_named texturaL int 1 // 2º unidad de textura ‐> *
    param_named texturaM int 2 // 3º unidad de textura ‐> *
  }
}

material BombaGLSL {
  technique {
    pass {
        vertex_program_ref BombaTeseladaVS
        { // params ‐> default_params
        }
        fragment_program_ref BombaTeseladaFS
        { // params ‐> default_params
        }

        texture_unit { //int 0
          texture checker.png 2d
        }
        texture_unit { // int 1
          texture BumpyMetal.jpg 2d
        }
        texture_unit { //int 2
          texture spaceSky.jpg 2d
        }
    }
  }
}






//EJERCICIO 9

vertex_program SpaceSkyVS glsl //nombre para el shader
{
  source SpaceSkyVS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named_auto modelViewProjMat worldviewproj_matrix
  }
}

fragment_program SpaceSkyFS glsl //nombre para el shader
{
  source SpaceSkyFS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named texturaL int 0 // 1º unidad de textura ‐> *
    param_named texturaM int 1 // 2º unidad de textura ‐> *
    param_named BF float 0.7
    param_named intLuzAmb float 1.0
  }
}

material SpaceSkyGLSL {
  technique {
    pass {
        vertex_program_ref SpaceSkyVS
        { // params ‐> default_params
        }
        fragment_program_ref SpaceSkyFS
        { // params ‐> default_params
        }

        texture_unit { // int 0
          texture lightMap.jpg 2d
        }
        texture_unit { //int 1
          texture spaceSky.jpg 2d
        }
    }
  }
}









//EJERCICIO 10

vertex_program SpaceVS glsl //nombre para el shader
{
  source SpaceVS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named_auto modelViewProjMat worldviewproj_matrix
  }
}

fragment_program SpaceFS glsl //nombre para el shader
{
  source SpaceFS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named texturaL int 0 // 1º unidad de textura ‐> *
    param_named texturaM int 1 // 2º unidad de textura ‐> *
    param_named ZF float 0.5
  }
}

material SpaceGLSL {
  technique {
    pass {
        vertex_program_ref SpaceSkyVS
        { // params ‐> default_params
        }
        fragment_program_ref SpaceSkyFS
        { // params ‐> default_params
        }

        texture_unit { // int 0
          texture lightMap.jpg 2d
        }
        texture_unit { //int 1
          texture spaceSky.jpg 2d
        }
    }
    pass {
        vertex_program_ref SpaceVS
        { // params ‐> default_params
        }
        fragment_program_ref SpaceFS
        { // params ‐> default_params
        }

        texture_unit { // int 0
          texture lightMap.jpg 2d
        }
        texture_unit { //int 1
          texture spaceSky.jpg 2d
        }
    }
  }
}








//EJERCICIO 12

fragment_program HolesFS glsl //nombre para el shader
{
  source HolesFS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
      param_named textureT int 0 // unidad de textura
      param_named tex_front int 1 // unidad de textura
      param_named tex_back int 2 // unidad de textura
  }
}

material HolesGLSL {
  technique {
    pass {
        cull_hardware none  // para indicar que se rendericen ambas caras
        cull_software none
        vertex_program_ref BombaTeseladaVS
        { // params ‐> default_params
        }
        fragment_program_ref HolesFS
        { // params ‐> default_params
        }

        texture_unit { // int 0
          texture corrosion.jpg 2d
        }
        texture_unit { //int 1
          texture BumpyMetal.jpg 2d
        }
        texture_unit { //int 2
          texture BeachStones.jpg 2d
        }
    }
  }
}




//EJERCICIO 13

vertex_program HolesAndLightingVS glsl //nombre para el shader
{
  source HolesAndLightingVS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named_auto modelViewProjMat worldviewproj_matrix
    param_named_auto normalMat inverse_transpose_world_matrix
  }
}

fragment_program HolesAndLightingFS glsl //nombre para el shader
{
  source HolesAndLightingFS.glsl // nombre del archivo del código
  default_params // valores para las variable uniform
  {
    param_named textureT int 0 // unidad de textura
    param_named textureL int 1
    param_named textureM int 2

    param_named_auto lightPos light_position 0
    param_named_auto intLuz light_diffuse_colour 0
    param_named color_front float3 0.72 0.57 0.35
    param_named color_back float3 0.0 0.6 0.8
  }
}

material HolesAndLightingGLSL {
  technique {
    pass {
        cull_hardware none
        cull_software none
        vertex_program_ref HolesAndLightingVS
        { // params ‐> default_params
        }
        fragment_program_ref HolesAndLightingFS
        { // params ‐> default_params
        }

        texture_unit { // int 0
          texture corrosion.jpg 2d
        }
        texture_unit { //int 1
          texture BumpyMetal.jpg 2d
        }
        texture_unit { //int 2
          texture BeachStones.jpg 2d
        }
    }
  }
}
